// Package dispatcher provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package dispatcher

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// RunCreated defines model for RunCreated.
type RunCreated struct {

	// status code of the request
	Code int `json:"code"`

	// Unique identifier of a Playbook run
	Id *string `json:"id,omitempty"`
}

// RunInput defines model for RunInput.
type RunInput struct {

	// Identifier of the tenant
	Account string `json:"account"`

	// Optionally, information about hosts involved in the Playbook run can be provided.
	// This information is used to pre-allocate run_host resources.
	// Moreover, it can be used to create a connection between a run_host resource and host inventory.
	Hosts *RunInputHosts `json:"hosts,omitempty"`

	// Additional metadata about the Playbook run. Can be used for filtering purposes.
	Labels *RunInput_Labels `json:"labels,omitempty"`

	// Identifier of the host to which a given Playbook is addressed
	Recipient string `json:"recipient"`

	// Amount of seconds after which the run is considered failed due to timeout
	Timeout *int `json:"timeout,omitempty"`

	// URL hosting the Playbook
	Url string `json:"url"`
}

// RunInput_Labels defines model for RunInput.Labels.
type RunInput_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// RunInputHosts defines model for RunInputHosts.
type RunInputHosts []struct {

	// Host name as known to Ansible inventory.
	// Used to identify the host in status reports.
	AnsibleHost string `json:"ansible_host"`

	// Inventory id of the given host
	InventoryId *string `json:"inventory_id,omitempty"`
}

// RunsCreated defines model for RunsCreated.
type RunsCreated []RunCreated

// ApiInternalRunsCreateJSONBody defines parameters for ApiInternalRunsCreate.
type ApiInternalRunsCreateJSONBody []RunInput

// ApiInternalRunsCreateJSONRequestBody defines body for ApiInternalRunsCreate for application/json ContentType.
type ApiInternalRunsCreateJSONRequestBody ApiInternalRunsCreateJSONBody

// Getter for additional properties for RunInput_Labels. Returns the specified
// element and whether it was found
func (a RunInput_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RunInput_Labels
func (a *RunInput_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RunInput_Labels to handle AdditionalProperties
func (a *RunInput_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RunInput_Labels to handle AdditionalProperties
func (a RunInput_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
