package dispatcher

// package dispatcher contains code generated from an OpenAPI spec derived from
// the playbook-dispatcher project. First, swagger-cli dereferences and bundles
// the public.openapi.yaml and private.openapi.yaml files. Then the boilerplate
// code is generated by the github.com/deepmap/oapi-codegen project. At the time
// of this writing, it was generated using version 1.5.1. Go does not support
// path@version synytax with 'go run', so oapi-codegen must be installed
// manually before code can be generated:
// 'go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@1.5.1'

//go:generate swagger-cli bundle --outfile /tmp/openapi.yaml https://github.com/RedHatInsights/playbook-dispatcher/raw/6950cf45d9c0ff464ecbfcd1d83d2cc0797fe41f/schema/private.openapi.yaml
//go:generate oapi-codegen -generate types -package dispatcher -o ./dispatcher_types.gen.go /tmp/openapi.yaml
//go:generate oapi-codegen -generate client -package dispatcher -o ./dispatcher.gen.go /tmp/openapi.yaml

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/spf13/viper"
)

type DispatcherClient interface {
	Dispatch(ctx context.Context, inputs []RunInput) ([]RunCreated, error)
}

type dispatcherClientImpl struct {
	client ClientWithResponsesInterface
}

func NewDispatcherClientWithDoer(cfg *viper.Viper, doer HttpRequestDoer) DispatcherClient {
	client := &ClientWithResponses{
		ClientInterface: &Client{
			Server: cfg.GetString("Dispatcher_Host"),
			Client: doer,
			RequestEditors: []RequestEditorFn{
				func(ctx context.Context, req *http.Request) error {
					req.Header.Set("Authorization", fmt.Sprintf("PSK %s", cfg.GetString("Dispatcher_PSK")))
					req.Header.Set("Content-Type", "application/json")
					return nil
				},
			},
		},
	}

	return &dispatcherClientImpl{
		client: client,
	}
}

func NewDispatcherClient(cfg *viper.Viper) DispatcherClient {
	client := &http.Client{
		Timeout: time.Duration(int(time.Second) * cfg.GetInt("Dispatcher_Timeout")),
	}

	return NewDispatcherClientWithDoer(cfg, client)
}

func (dc *dispatcherClientImpl) Dispatch(ctx context.Context, inputs []RunInput) ([]RunCreated, error) {
	res, err := dc.client.ApiInternalRunsCreateWithResponse(ctx, inputs)
	if err != nil {
		return nil, err
	}

	if res.HTTPResponse.StatusCode != 207 {
		return nil, fmt.Errorf("Unexpected error code %d received", res.HTTPResponse.StatusCode)
	}

	return *res.JSON207, nil
}
