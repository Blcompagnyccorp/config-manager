// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get archive of state changes for requesting account
	// (GET /states)
	GetStates(ctx echo.Context, params GetStatesParams) error
	// Update and roll out configuration state for requesting account
	// (POST /states)
	UpdateStates(ctx echo.Context) error
	// Get the current state for requesting account
	// (GET /states/current)
	GetCurrentState(ctx echo.Context) error
	// Get single state change for requesting account
	// (GET /states/{id})
	GetStateById(ctx echo.Context, id StateIDParam) error
	// Get ansible playbook for current state configuration
	// (GET /states/{id}/playbook)
	GetPlaybookById(ctx echo.Context, id StateIDParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetStates converts echo context to params.
func (w *ServerInterfaceWrapper) GetStates(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStates(ctx, params)
	return err
}

// UpdateStates converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStates(ctx)
	return err
}

// GetCurrentState converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentState(ctx)
	return err
}

// GetStateById converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateById(ctx, id)
	return err
}

// GetPlaybookById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/states", wrapper.GetStates)
	router.POST(baseURL+"/states", wrapper.UpdateStates)
	router.GET(baseURL+"/states/current", wrapper.GetCurrentState)
	router.GET(baseURL+"/states/:id", wrapper.GetStateById)
	router.GET(baseURL+"/states/:id/playbook", wrapper.GetPlaybookById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX32/bNhD+Vwhuj2rkdOuL3ppuGIxlaLBuT0FQnMWTxU4klePRiBHofx9I2pZdKz+8",
	"Zhn2Jol3x++++3hH3cvamd5ZtOxldS97IDDISOntUhvN8UGhr0n3rJ2VlfwN7rQJRthgFkjCNYLQh469",
	"YCcIOZCVhdTR9DYgrWUhLRiUlexSwEL6ukUDOXIDoWNZvZsV0uTAsno7i2/a5rfzQvK6j/7aMi6R5DAU",
	"8mPTeJxAN7dK18DoBbcoPAOxtkvRO6+jRYQbFxIyQdgB6xVG5PFrZKNDRuGRo6VmNDEQsDDAdTu6PpCh",
	"y6gmU9zPaTaZ0ycGxvlPV7EKx5n5uCqA6jYi1got60YjbaH0wO2IRCtZSMLboAmVrJgC7qP6nrCRlfyu",
	"HAVQ5lVfbmDIIWLafIw+7+vaBZs4N3B3iXbJrazOc167111mnknbpRyKrWOKm2RGrkdijSksjGEfQ7Xd",
	"fShibs9NoZAdLLB7yv4yGcV0txifjJ4qtknVLb5gnaDNrWYN7CjGOCLicovlaGXHDSiVhArd1R5LDXQe",
	"i6+IS2rVYGv87Hq0voY+fkYbFXYt0cKiwygDpX1+vJkojrZeL9t8/k90JTSoNES4p7sP+/K8HmEUk3l9",
	"tdnNBPWJwvf5eLyEympCYFSf4UmnP7RBz2D6k8Wp9+XymM+oq1eX9D6vicrUFZ8VcFuNMSwQwVqOvS6G",
	"aRyZSLIMIXWtI52N/O5bK2B8w9rgscuQqG3ccRP94Gyjl8KAhSWS8EgrXacImjs8MpCFXCH57Ds7m52d",
	"RzxRldBrWckf0qci9d5ESZnYTo/LPJ6iCJNq50pW8hfMbdAnp3HaXk+zOZqUeRoPxZOGm8k43MQz43tn",
	"fcbzdjbLXcMy5oMAfd/FYamdLb/4mOP9KSNip4nE9yHPH3+NRP2YtzxcugAlfsfbgJ6zzfmxzfvAbZxv",
	"GZww2vs4xRtyRtDo+24q/twykoVOfEJaIYmfiVyerz4YA7TOZdhNUteIPFrrFuwSvWgcbTeJm8LYEnrn",
	"J2r6Zx+luCvrxvXCqfXL8j3Fc1oQBvp8S7GIKt3DFihCgnV8DRj+RV0cTPpvksU/Lm2uhgCrBLmuEy6w",
	"qNOhDrlmm2o/VOWh2B7isg5EG0oeOswfsklO+H9B7H923tIFO9P1/BLcazU82Uwv1nN1cj89uGy/WrP8",
	"ltodMRpr1OFB93oup2XfwXrh3F+PkXu1sXkVfhnvuFxZdbYG0x2SOzHdX4hBsF4vOhRbNhJ9hyI96B2b",
	"f6Ik9MxCoE5WsmXufVWWdeeCOiNULfBZ7UwJvS5zhDebK0W5iheGQ5A9ORXqvEGxjflM390/bPr/G26G",
	"vwMAAP//Cq2pKtUPAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

