// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get archive of state changes for requesting account
	// (GET /states)
	GetStates(ctx echo.Context, params GetStatesParams) error
	// Update and roll out configuration state for requesting account
	// (POST /states)
	UpdateStates(ctx echo.Context) error
	// Get the current state for requesting account
	// (GET /states/current)
	GetCurrentState(ctx echo.Context) error
	// Get a preview of the playbook built from the provided state map
	// (POST /states/preview)
	GetPlaybookPreview(ctx echo.Context) error
	// Get single state change for requesting account
	// (GET /states/{id})
	GetStateById(ctx echo.Context, id StateIDParam) error
	// Get ansible playbook for current state configuration
	// (GET /states/{id}/playbook)
	GetPlaybookById(ctx echo.Context, id StateIDParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetStates converts echo context to params.
func (w *ServerInterfaceWrapper) GetStates(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStates(ctx, params)
	return err
}

// UpdateStates converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStates(ctx)
	return err
}

// GetCurrentState converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentState(ctx)
	return err
}

// GetPlaybookPreview converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookPreview(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookPreview(ctx)
	return err
}

// GetStateById converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateById(ctx, id)
	return err
}

// GetPlaybookById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/states", wrapper.GetStates)
	router.POST(baseURL+"/states", wrapper.UpdateStates)
	router.GET(baseURL+"/states/current", wrapper.GetCurrentState)
	router.POST(baseURL+"/states/preview", wrapper.GetPlaybookPreview)
	router.GET(baseURL+"/states/:id", wrapper.GetStateById)
	router.GET(baseURL+"/states/:id/playbook", wrapper.GetPlaybookById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYTY/bNhP+KwTf96isvGlz8S2bFIHRLbJt2lOwCMbiyGYqfmQ4ctdY6L8XJGXLirRf",
	"aZqgN0ucGT585pkZWreycsY7i5aDXN5KDwQGGSk9XWqjOf5QGCrSnrWzcil/gRttWiNsa9ZIwtWCMLQN",
	"B8FOEHJLVhZSR9NPLdJeFtKCQbmUTQpYyFBt0UCOXEPbsFy+WBTS5MBy+XwRn7TNT+eF5L2P/toybpBk",
	"1xXybV0HnEG3skpXwBgEb1EEBmJtN8K7oKNFhBsXEjJB2ADrHUbk8W1ko0FGEZCjpWY0MRCwMMDVdnC9",
	"44Quo5o94umZFrNneueIL/bRaS52cMQf1vtRcLQx2ntZEQKj+gBx7+FhCaEav4hkyevj7oFJ203enIFx",
	"9foqSmBKa4irAqjaRrq0Qsu61kgHHjzwdoCqlSwk4adWEyq5ZGrxFPX/CWu5lP8rB/WVeTWUPQzZRUz9",
	"y+jzsqpca1PCDdxcot3wVi7PM6nHx8nBioNjips0Ts4jscYUFoaw96E67N4V8WyPPUIhG1hj85D9ZTKK",
	"xz1gfDB6ylh/VLf+iFWCtrKaNbCjGGNCxOUBy2TlyA0olaoEmqsTlmpoAhafEZdKRYOt8IPzaEMF/lSQ",
	"aGHdYJSB0iH/vJ5JjrZBb7a5+TzRldCg0hDhPt29O5Xn+wFGMXuuzza7nqE+Ufgyl8fXUNlJQT/g9Ls2",
	"GBiMf7I49alc7vMZdPXNJX3Ka5gSe6R13K1engwntEwaQz+ZUImanBHHRv15Gy76KTUT08DNTNzToTcN",
	"5u4YU0eEhJ4wxHZqN2I8sbRlUbtoEnfaxZf9prNb9VN4utev/azLy4VMU+1ROTkIesgMEME+PTuGZu5c",
	"aUGkxESaatdadQ/uO5O+eh2j145MrAHZtmmoTNrAIP9TawWMz1gbnLp0Sfm1m2J/5WytN8KAhQ2SCEg7",
	"XaUImhucGMhC7pBC9l2cLc7OU8I9WvBaLuUP6VWRRmOiu0zFkH5usiailFNTWSm5lG8wT6mQnIab2Pv5",
	"TA0mZb6pdcWDhv2t6RGW/V2ku07C8s6GjPz5YpELzzLm0gPvm3jl0s6WH0Nk4/Yps/5Y3Ckz44y8/TlS",
	"+mPecrx0AUr8hp9aDJxtzmfE2PI2VlYGJ4wOIRZRagA0+L6Yi7+yjGShEe+QdkjiJyKX5RpaY4D2OWHH",
	"K5GrRb4jVVuwGwx95aZN4qYw9Hbvwkz2//BRtEcB9K4XTu2/Lt9zPKcFYcDnu65FVKmxrVG0Cdb0Ptf9",
	"i7oYXdn+kSy+OLU5GwKsEuSaRriWRZXKv80567N9V5a74lDuZdUS9ZTcVfavskk+8H+C2O9Wb+lvWqbr",
	"8SnwhDuNf6X7w2zxvUG+amC/du7Pq972u5VgG1DF4tugjRBRgOjxC99j/IJqZLzhcmfV2R5MM8Y7MyC/",
	"TBbT5nhE3v/tPhxArFvdcFZGek9upxWqPqUG/Ch/t1p1D47Ni/1KPXlyjv71frNh91VJjjXW4Gj6PKYm",
	"IqflUVD3kHsojG/C7/eRqQ163ZyoM9I3bjKj3t9/nEiNKrPQUiOXcsvsw7Isq8a16oxQbYHPKmdK8LrM",
	"EZ71l8dyF6+GY5CenGqrvEFxiPlI3+OXrPQhprvu/g4AAP//sG1x/dsTAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
