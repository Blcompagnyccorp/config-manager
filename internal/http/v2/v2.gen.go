// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYS3PbNhD+KztoZ3RhTDVxLrw1aZt6+vK4ySnxZCBiKSEFARpYqFE9/O8dAHyIFuU4",
	"ie3p9GSBAL9dfvv4Fr5mpakbo1GTY8U1s+gaox3GxelyGf6URhNqCj8JP1LeKC51WLlygzWPz3cNsoI5",
	"slKvWdu2GRPoSisbkkazgr3gAi7wyqMj1mbsdHl6X8i/G4KfjNci4D6/P4/PNKHVXMGfaLdo4UdrjWXh",
	"XAKJDJ1bU0mF4WdjTYOWZKKOl6Xxmt5LEVZT5AsU8DMn6M6A9vUKLctu+pQxXpLc4hxCbQhhYxxBaXQl",
	"197ysAeo+UqhAEeccIRcGaOQ64AZ4q0k1+Vx3ClkgPIOKmPBeq2lXsPLAQMEJw6lUQrLCDJr0iInFO85",
	"HZp8LWsEU0GTmIR4dgI00hH3jD0EeeNCqBIQbXAKZmapnQtMF03wWl55BClQk6QdbLnyOAuinVxvUuV8",
	"GZNnHcKdeAyfeGjqh361RYgkBPw9FuYcN3Z9a2oau+Za/pPc/jQPFmsUMp7+Ci4uRhRoFN+tjPnLzRDR",
	"Do/M6gOWlKpX6srEwpYUCpIlc09qrvk6VtcWrUsOPY0UNKh5I1nBnp0sT5YsYw2nTXQ/H60X12yNM2n7",
	"0mhH1pfkgGsBFslb7YDD99rJlcLhA8B5SaEmgcxAAQJPxduHyqbWiKIP2gmLHiayzgQr2Cuk8w4z+mp5",
	"jYTWseLtNQvdjV15tDvWpwnrkEKcQ4SuvLQoWEHWY3ZLI7zMpiLw9KCl8qZRsoye5R+f7HitZlvrfnCm",
	"5P3xS9KACPytxYoV7Jt8FKJ8cCAPh0a9+NTZ0z0NuP1sOBR7ua9rbncxS8lK3CJwfRjEo3GKIHm3OJ4u",
	"Izg0fC11aIfAreW7vd7nBjOp4ioZDiWROIHXG4Q3F79CjDKM8YeFkrWkRczDhakqh7SAkmtYIXiHIiRe",
	"b7T7COcVuQQpsOJeUart4EwPJx08Xx4705uRDpbzqdozcqdUjSbZflZ2JlnxfDlUu9SEoZTbNpuHSV6x",
	"meweX/289P7gzI25YSrzMTZzdrLum2a3Oj9n97rghE1JWLtjqdwNIXk/gYxNMaZVXBviapaE/X7wtjuX",
	"dR+TDdEY6Ox9usweora/sF5fIQEHJR2FjORKDWUUQBvj5rp2HERipZj4jCu1gzhlxeeg8e/jHTi9fT6o",
	"atcMXhix+4oU+p/MeI88Cj36xLFfMF3IJjzvMXDDu/mqmQpye9CVvvuslLpThzgs1pTR8eb07OBG9iAW",
	"w23tNyOitj1So+iLfr+4p7KdX0vR3kW7XYOlrGQ5XDD2hHq1i+K6kGIBYZIcJfpWWT9LN5aIzFUnse9Y",
	"6a1FTe9YkNio4j3IjIEsbtShU1gsUdPonwujaXRfgNSOkIvb9PqIXAdzo8w+6EB5b5n2nxwyk2jdTKPk",
	"vov/Z0ise6tYwXLeyHx6j8m3T1l72f4bAAD//1bnHUO3EQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
